service: sqsdeploylambda

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    SQS_OFFLINE_ENDPOINT: ${self:custom.serverless-offline-sqs.endpoint}
    QUEUE_ARN: ${self:custom.myQueueARN}

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-offline-sqs
  - serverless-offline

functions:
  triggerhandler:
    handler: src/triggerhandler.handler
    iamRoleStatements:
    - Effect: "Allow"
      Action:
        - sqs:*
      Resource: "*"
    events:
      - httpApi:
          path: /
          method: post
  firsthandler:
    handler: src/sqs/firsthandler.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - FirstQueue
              - Arn
  secondhandler:
    handler: src/sqs/secondhandler.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - SecondQueue
              - Arn
  thirdhandler:
    handler: src/sqs/thirdhandler.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ThirdQueue
              - Arn

custom:
  webpack:
      webpackConfig: 'webpack.config.js'
      includeModules: false
      packager: 'npm'
  serverless-offline:
      httpPort: 8080
  serverless-offline-sqs:
    autoCreate: true
    apiVersion: '2012-11-05'
    endpoint: http://0.0.0.0:9324
    region: ${self:provider.region}
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false
  myQueueARN: arn:aws:sqs:${aws:region}:${aws:accountId}:${self:service}-${sls:stage}-myQueue

resources:
  Resources:
    FirstQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:service}-${sls:stage}-FirstQueue
    SecondQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:service}-${sls:stage}-SecondQueue
    ThirdQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:service}-${sls:stage}-ThirdQueue